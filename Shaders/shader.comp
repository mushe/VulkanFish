#version 450

struct Particle {
    vec3 pos;
    vec3 vel;
    vec3 rgb;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;


int N = 30000;
float FIELD_SCALE = 1.0;


float MAX_SPEED = 0.0018;
float WALL_AVOIDANCE = 0.00002;

float ATTRACTION_DISTANCE = 0.05;
float ATTRACTION = 0.00042;

float ALIGNMENT_DISTANCE = 0.05;
float ALIGNMENT = 0.0036;

float AVOIDANCE_DISTANCE = 0.015;
float AVOIDANCE = 0.0002;


void main()
{
    uint index = gl_GlobalInvocationID.x;
    vec3 pos = particlesIn[index].pos;
    vec3 vel = particlesIn[index].vel;
    
    
    
    vec3 acc = vec3(0.0);
    
    if(pos.x > FIELD_SCALE) acc.x += -WALL_AVOIDANCE;
    if(pos.x < 0.0) acc.x += WALL_AVOIDANCE;
    if(pos.y > FIELD_SCALE) acc.y += -WALL_AVOIDANCE;
    if(pos.y < 0.0) acc.y += WALL_AVOIDANCE;
    if(pos.z > FIELD_SCALE) acc.z += -WALL_AVOIDANCE;
    if(pos.z < 0.0) acc.z += WALL_AVOIDANCE;
    
    
    vec3 attractionPosSum = vec3(0,0, 0);
    int attractionNearCnt = 0;
    
    vec3 alignmentVelSum = vec3(0,0,0);
    int alignmentNearCnt = 0;
    
    vec3 avoidanceSum = vec3(0,0,0);
    int avoidanceNearCnt = 0;
    
    for(uint i = 0 ; i < N; i++)
    {
        vec3 p = particlesIn[i].pos;
        vec3 v = particlesIn[i].vel;
        float dist = length(p - pos);
        
        if(dist < ATTRACTION_DISTANCE)
        {
            attractionPosSum += p;
            attractionNearCnt++;
        }
        
        if(dist < ALIGNMENT_DISTANCE)
        {
            alignmentVelSum += v;
            alignmentNearCnt++;
        }
        
        if(dist < AVOIDANCE_DISTANCE)
        {
            avoidanceSum += pos - p;
            avoidanceNearCnt++;
        }
        
    }
    
    if(attractionNearCnt > 0)
    {
        vec3 meanPos = attractionPosSum / attractionNearCnt;
        vec3 attractionForce = (meanPos - pos) * ATTRACTION;
        acc += attractionForce;
    }
    
    if(alignmentNearCnt > 0)
    {
        vec3 meanVel = alignmentVelSum / alignmentNearCnt;
        vec3 alignmentForce = meanVel * ALIGNMENT;
        acc += alignmentForce;
    }
    if(avoidanceNearCnt > 0)
    {
        acc += avoidanceSum * AVOIDANCE;
    }
    
    
    
    
    vel += acc;
    if(length(vel) > MAX_SPEED) vel = normalize(vel) * MAX_SPEED;
    
    particlesOut[index].pos = pos + vel;
    particlesOut[index].vel = vel;
    
    
    

}
